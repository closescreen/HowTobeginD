== Почему D

- Охватывает широкий диапазон от высокоуровнего программирования до низкоуровнего ( vs динамические ).
- Статическая проверка обнаруживает ошибки до запуска программы, что помогает писать большие или долгоработающие программы (vs dinamic).
- Производительный. Программы быстро запускаются. Не требуют памяти для загрузки среды исполнения ( vs VM, интерпретируемые языки )
- Компилятор, система сборки и другие инструменты не требуют много системных зависимостей при установке. 
- Легко писать без IDE. С интрументами D удобно работать из командной строки (vs Java-like).
- Язык мультиплатформенный, код стандартной библиотеки платформо независим, имеются инструменты для условной компиляции под целевую платформу.
- Скомпилированные бинарные файлы хорошо переносимы с компьютера на компьютер той же архитектуры (vs Rust, Haskell)
- Код используемых в программе модулей входит в исполняемый файл, программы не требуют установки среды исполнения (vs интерпретируемые) или VM (vs Java) 
   или неиспользуемых в программе библиотек (vs Haskell).
- D лишь настолько сложен, насколько это требуется в данный момент: 
   В языке море понятий, но не обязательно изучать много теории, чтобы начать писать полезные программы. 
   С приобретением опыта у программиста, язык не будет ограничивать программиста своей примитивностью. 
- Средства обеспечения защиты данных при параллельном или асинхронном программировании встроена и в сам язык и в стандартную библиотеку.
